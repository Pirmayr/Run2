invoketests

command performtests
  performtest (+ 47 11) 58
  performtest (- 47 11) 36
  performtest (* 47 11) 517
  performtest (/ 47 11) 4
  performtest (== 47 11) false
  performtest (!= 47 11) true
  performtest (< 47 11) false
  performtest (<= 47 11) false
  performtest (> 47 11) true
  performtest (>= 47 11) true
  performtest (ToString (at 'Hello' 1)) 'e'
  performtest (performfortest) 55
  performtest (performforeachtest) 9
  performtest (performmaptest) 12
  performtest (square 2) 4
  performtest (factorial 5) 120
  performtest (Length 'Hello World!') 12
  performtest (upperbound (array 1 2 3)) 2
  performtest (upperbound (split "Hello\nworld!")) 1

command performfortest
  setlocal sum 0
  for i 1 10 1 (setlocal sum (+ sum i))

command performforeachtest
  setlocal sum 0
  foreach i (array 3 1 4 1) (setlocal sum (+ sum i))

command performmaptest
  setlocal product 1
  map (array 3 1 4 1) (setlocal product (* product item))

command initialize
  set windowsdirectory 'C:\Windows'
  set programfilesdirectory 'C:\Program Files'
  set programfiles32directory 'C:\Program Files (x86)'
  set visualstudiodirectory (finddirectory '[programfiles32directory]\Microsoft Visual Studio' '????')
  set msbuildpath (findfile visualstudiodirectory 'MSBuild.exe')

command array return (ToArray arguments)
command dir directory run cmd /c "dir" directory
command factorial n if (== n 1) 1 (* (factorial (- n 1)) n)
command finddirectory basedirectory pattern return (Helpers.FindDirectory basedirectory pattern)
command findfile basedirectory pattern return (Helpers.FindFile basedirectory pattern)
command split value return (Split value (at \n 0))
command square n return (* n n)
command upperbound value return (- (Length value) 1)
command write message Console.WriteLine (ToString message)  

command setfailure code actual expected
  set testsok False 
  write '(failure) code: ([code]) actual: [actual] expected: [expected]'

command invoketests 
  initialize
  set testsok True
  performtests
  write (if testsok (return 'tests ok') 'tests failed')

command performtest (tokens) expected
  if (!= (set actual (evaluate tokens)) expected) (setfailure (ToCode tokens) actual expected)
