invoketests

command performtests
  performtest (+ 47 11) 58
  performtest (- 47 11) 36
  performtest (* 47 11) 517
  performtest (/ 47 11) 4
  performtest (== 47 11) false
  performtest (!= 47 11) true
  performtest (< 47 11) false
  performtest (<= 47 11) false
  performtest (> 47 11) true
  performtest (>= 47 11) true
  performtest (ToString (at 'Hello' 1)) 'e'
  performtest (performfortest) 55
  performtest (performforeachtest) 9
  performtest (performmaptest) 12
  performtest (square 2) 4
  performtest (factorial 5) 120
  performtest (Length 'Hello World!') 12
  performtest (upperbound (list 1 2 3)) 2

command performfortest
  setlocal sum 0
  for i 1 10 1 (setlocal sum (+ sum i))

command performforeachtest
  setlocal sum 0
  foreach i (list 3 1 4 1) (setlocal sum (+ sum i))

command performmaptest
  setlocal product 1
  map (list 3 1 4 1) (setlocal product (* product item))

command initialize
  set windowsdirectory 'C:\Windows'
  set programfilesdirectory 'C:\Program Files'
  set programfiles32directory 'C:\Program Files (x86)'
  set visualstudiodirectory (finddirectory '[programfiles32directory]\Microsoft Visual Studio' '????')
  set msbuildpath (findfile visualstudiodirectory 'MSBuild.exe')

command list return arguments
command dir directory run cmd /c "dir" directory
command factorial n if (== n 1) 1 (* (factorial (- n 1)) n)
command finddirectory basedirectory pattern return (Helpers.FindDirectory basedirectory pattern)
command findfile basedirectory pattern return (Helpers.FindFile basedirectory pattern)
command split value return (Split value (at \n 0))
command square n return (* n n)
command upperbound value return (- (Count value) 1)
command write message Console.WriteLine (ToString message)  

command archive
  initialize
  write (evaluate (factorial 5))
  map (split (dir c:\windows)) (write item)
  map (list 1 2 3) (write item)
  map (list 'hans' 'hugo') (write (ToUpper item))
  write (factorial 15)
  write msbuildpath
  map (GetKeys variables) (write item)
  set files (split (dir c:\windows))
  for i 0 (upperbound files) 1 
    (write (at files i))
  write (factorial 10)
  write (length files)
  print (Directory.Exists c:\windows1)
  print (Length "hallo")
  set TestLong 47
  set Message 'Hi Hugo'
  set Condition (Equal 1 1)
  print 
    (if $Condition                                                          
      (add $TestLong 'hugo') 
      'Die Botschaft ist: $Message')
  print (dir c:\windows)
  print (at (split (run cmd /c dir c:\windows)) 10)
  print (CreateMessage (fact 10))
  print $a

command invoketests 
  set testsok True
  performtests
  write (if testsok 'tests ok' 'tests failed')

command performtest (tokens) expected
  if (!= (set actual (evaluate tokens)) expected) (setfailure (ToCode tokens) actual expected)

command setfailure code actual expected
  set testsok False
  write '(failure) code: ([code]) actual: [actual] expected: [expected]'
 