command System 'various tests'
  if
    ( performtest ( invoketests ) True )
    (
      write 'Writing results to disk ...'
      writefile [basedirectory]\..\..\..\Commands.md
        ( gethelp )
      writefile [basedirectory]\..\..\..\System.run2
        ( getcode )
      writefile [basedirectory]\..\..\..\Commands.txt
        ( getcommands )
    )

command performtests 'performs various tests'
  performtest ( initialize ) True
  performtest ( + 47 11 ) 58
  performtest ( - 47 11 ) 36
  performtest ( * 47 11 ) 517
  performtest ( / 47 11 ) 4
  performtest
    (
      < ( - ( / 22.0 7.0 ) 3.142857 ) 0.000001
    )
    True
  performtest ( == 47 11 ) False
  performtest ( != 47 11 ) True
  performtest ( < 47 11 ) False
  performtest ( <= 47 11 ) False
  performtest ( > 47 11 ) True
  performtest ( >= 47 11 ) True
  performtest
    ( == ( array 1 2 3 ) ( array 1 2 3 ) )
    True
  performtest
    ( == ( array 1 2 3 ) ( array 1 2 4 ) )
    False
  performtest
    (
      == ( array 1 2 3 4 ) ( array 1 2 3 )
    )
    False
  performtest ( sum ( array 1 2 3 ) ) 6
  performtest ( sumof 1 2 3 ) 6
  performtest ( averageof 1 2 3 4 ) 2.5
  performtest ( average ( array 1 2 3 4 ) ) 2.5
  performtest ( square 2 ) 4
  performtest
    ( factorial 50 )
    30414093201713378043612608166064768844377641568960512000000000000
  performtest ( ToString ( at 'Hello' 1 ) ) 'e'
  performtest
    (
      local result 0
      for i 1 10 1
        ( local result ( + result i ) )
    )
    55
  performtest
    (
      local result 0
      foreach i
        ( array 3 1 4 1 )
        ( local result ( + result i ) )
    )
    9
  performtest
    (
      local product 1
      map
        ( array 3 1 4 1 )
        (
          local product ( * product item )
        )
    )
    12
  performtest ( Length 'Hello World!' ) 12
  performtest
    ( at ( split 'Hello~nworld!' ) 1 )
    'world!'
  performtest ( Count ( list 1 2 3 4 5 ) ) 5
  performtest ( upperbound ( array 1 2 3 ) ) 2
  performtest
    (
      upperbound ( split 'Hello~nworld' )
    )
    1
  performtest ( size 'hello' ) 5
  performtest ( size ( array 1 2 3 4 5 6 ) ) 6
  performtest ( size ( list 1 2 3 4 5 6 7 ) ) 7
  performtest ( typename 'Hello' ) 'String'
  performtest ( hasmember 'hello' 'Length' ) True
  performtest ( hasmember 'hello' 'Count' ) False
  performtest ( power 3 4 ) 81
  performtest
    (
      createdirectory c:\testdirectory
      directoryexists c:\testdirectory
    )
    True
  performtest
    (
      writefile c:\testdirectory\hello.txt hello
      readfile c:\testdirectory\hello.txt
    )
    'hello'
  performtest
    (
      writefile c:\testdirectory\world.txt world
      readfile c:\testdirectory\world.txt
    )
    'world'
  performtest
    (
      writefile c:\testdirectory\values.txt '6~n1~n7~n8~n5~n9'
      average
        (
          split
            (
              readfile c:\testdirectory\values.txt
            )
        )
    )
    6
  performtest
    ( size ( getfiles c:\testdirectory ) )
    3
  performtest
    (
      deletedirectory c:\testdirectory
      directoryexists c:\testdirectory
    )
    False
  performtest ( sortstring 'foobar' ) 'abfoor'
  performtest ( sort 'hello' ) 'ehllo'
  performtest
    ( sort ( split '3~n1~n4~n1~n5~n9' ) )
    ( array '1' '1' '3' '4' '5' '9' )
  performtest
    (
      global value 4711
      increment value 1
      return value
    )
    4712
  performtest
    (
      local value 1234
      increment value 2
      return value
    )
    1236
  performtest
    (
      global dictionary ( newdictionary )
      addentry dictionary 'foo' 'bar'
      addentry dictionary 'hello' 'world'
      size dictionary
    )
    2
  performtest
    (
      switch
        ( < 1 1 )
        ( return 1 )
        ( == 1 1 )
        ( return 2 )
        ( > 1 1 )
        ( return 3 )
    )
    2
  performtest ( local a 4711 set a 1234 ) 1234
  performtest
    ( join ( array 'h' 'e' 'l' 'l' 'o' ) )
    'h e l l o'
  performtest
    ( joinfrom 'h' 'e' 'l' 'l' 'o' )
    'h e l l o'
  performtest
    ( dos echo 'hello world' )
    'hello world'
  performtest
    (
      if ( < 1 1 ) ( return 0 ) ( return 1 )
    )
    1
  performtest
    ( finddirectory SystemRoot System32 )
    '[SystemRoot]\System32'
  performtest
    ( findfile SystemRoot notepad.exe )
    '[SystemRoot]\notepad.exe'
  performtest ( hastype 'hello' String ) True
  performtest
    ( concatenation ( array foo bar ) )
    foobar
  performtest
    ( concatenationof Hello ' ' World! )
    'Hello World!'
  performtest ( typename ( quote ( + 1 1 ) ) ) List`1
  performtest
    ( > ( size ( dir SystemRoot ) ) 0 )
    True
  performtest
    ( endswith 'Hello World!' 'World!' )
    True
  performtest
    (
      >
        (
          size ( getmember 'Hello' 'Split' )
        )
        0
    )
    True
  performtest ( isarray ( array 1 2 3 ) ) True
  performtest
    (
      sortarray ( array 3 1 4 1 5 9 2 6 0 )
    )
    ( array 0 1 1 2 3 4 5 6 9 )
  performtest ( isstring 'Hello' ) True
  performtest
    (
      joinfrom
        ( typename 1 )
        ( typename ( todouble 1 ) )
    )
    'Int32 Double'
  performtest
    ( typename ( typeof 'hi' ) )
    RuntimeType
  performtest ( write 'hi' ) True
  performtest ( size ( newarray 1000 ) ) 1000
  performtest
    (
      local values ( newarray 1000 )
      put values 100 'foobar'
      at values 100
    )
    'foobar'
  performtest
    ( String.new ( tochar 'a' ) 10 )
    'aaaaaaaaaa'
  performtest ( head ( array 1 2 3 4 ) ) 1
  performtest ( head ( list 4 7 1 1 ) ) 4
  performtest
    ( arraytail ( array 4 7 1 1 ) )
    ( array 7 1 1 )
  performtest
    ( listtail ( list 4 7 1 1 ) )
    ( list 7 1 1 )
  performtest ( stringtail 'Hello' ) 'ello'
  performtest
    ( tail ( array 1 2 3 4 ) )
    ( array 2 3 4 )
  performtest ( median ( array 5 3 2 4 1 ) ) 3
  performtest ( medianof 5 3 2 4 1 ) 3
  performtest ( size ( additem ( list 1 2 3 ) 4 ) ) 4
  performtest ( besttype '4711' ) 4711
  performtest ( canparseint32 'foobar' ) False
  performtest ( canparseint32 '1234' ) True
  performtest ( parseint32 '4321' ) 4321
  performtest
    (
      for i 1 10 1
        ( if ( == i 5 ) ( break i ) i )
    )
    5
  performtest
    (
      < ( - ( Math.Sin 1.0 ) 0.84147 ) 0.000001
    )
    True
  return True

command invoketests 'invokes the tests'
  global testsok True
  performtest ( performtests ) True
  write
    (
      if testsok 'tests ok' 'tests failed'
    )
  return testsok

command initialize 'performs various inititalizations'
  global windowsdirectory 'C:\Windows'
  global programfilesdirectory 'C:\Program Files'
  global programfiles32directory 'C:\Program Files (x86)'
  global visualstudiodirectory
    (
      finddirectory '[programfiles32directory]\Microsoft Visual Studio' '????'
    )
  global msbuildpath
    (
      findfile visualstudiodirectory 'MSBuild.exe'
    )
  return True

command quote 'returns the unevaluated arguments'
  return arguments

command addentry 'adds an entry to a dictionary'
  object 'object'
  key 'key'
  value 'value'
  Add object key value

command additem 'adds an item to a list'
  object 'list'
  value 'value'
  Add object value
  return object

command array 'converts the arguments to an array'
  ToArray arguments

command arraytail 'returns an array without its first element'
  elements 'array'
  local result
    ( newarray ( - ( size elements ) 1 ) )
  if
    ( <= ( size elements ) 1 )
    ( array )
    (
      Array.Copy elements 1 result 0
        ( - ( size elements ) 1 )
      return result
    )

command average 'computes the average of the given values'
  values 'values'
  /
    ( todouble ( sum values ) )
    ( size values )

command averageof 'computes the average of the arguments'
  average arguments

command besttype 'tries to find the best type for the given object'
  object 'object'
  if
    ( isstring object )
    (
      switch
        ( canparseint32 object )
        ( parseint32 object )
        object
    )
    object

command canparseint32 'tests if the given string can be parsed to a int32'
  string 'string to be parsed'
  Int32.TryParse string 0

command concatenation 'concatenates the given strings'
  strings 'strings to be concatenated'
  local result ''
  map strings ( increment result item )

command concatenationof 'concatenate the arguments, which are assumed to be strings'
  concatenation arguments

command createdirectory 'creates specified directory'
  directory 'directory to be created'
  Directory.CreateDirectory directory

command deletedirectory 'deletes specified directory'
  directory 'directory to be deleted'
  Directory.Delete directory ( return True )

command dir 'executes the Windows command "dir" and returns the result'
  dos 'dir' ( join arguments )

command directoryexists 'tests if the specified directory exists'
  directory 'directory to be tested for existence'
  Directory.Exists directory

command dos 'executes specified dos-command and returns the output'
  run cmd /c ( join arguments )

command endswith 'tests if a strings ends with an other string'
  string 'string to be tested'
  value 'string to be tested for being the ending'
  EndsWith string value

command factorial 'computes the factorial of a number'
  number 'number for which the factorial is to be calculated'
  if
    ( == number 1 )
    1
    (
      * ( factorial ( - number 1 ) ) number
    )

command finddirectory 'searches for a directory'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return
    (
      Helpers.FindDirectory basedirectory pattern
    )

command findfile 'searches for a file'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return
    (
      Helpers.FindFile basedirectory pattern
    )

command getfiles 'returns an array of paths of the files in a directory'
  directory 'directory'
  Directory.GetFiles directory

command getmember 'get the array of member-information for the specified member in the given object'
  object 'object'
  name 'name of the member'
  invokeinstancemember 'GetMember' ( typeof object ) name

command hasmember 'tests if the specified member exists in the given object'
  object 'object'
  name 'name of the member'
  > ( Length ( getmember object name ) ) 0

command hastype 'tests if the specified object has the given type'
  object 'object'
  name 'name of the type'
  == ( typename object ) name

command head 'returns the first element of an indexed object'
  object 'indexed object'
  if
    ( == ( size object ) 0 )
    ( list )
    ( at object 0 )

command increment 'increments a variable'
  "name" 'name of the variable'
  incrementvalue 'increment'
  set name ( + ( get name ) incrementvalue )

command isarray 'tests if an object is an array'
  object 'object to be tested'
  invokeinstancemember 'IsArray' ( typeof object )

command isstring 'tests if an object is a string'
  object 'object to be tested'
  hastype object String

command join 'joins the elements of an array or a list of strings to a string separated by blanks'
  strings 'array or list of strings'
  String.Join ' '
    (
      if
        ( isarray strings )
        strings
        ( ToArray strings )
    )

command joinfrom 'joins the given arguments to a string separated by blanks'
  join arguments

command list 'returns the arguments as a list'
  return arguments

command listtail 'returns a list without its first element'
  items 'list'
  if
    ( <= ( size items ) 1 )
    ( list )
    (
      GetRange items 1 ( - ( size items ) 1 )
    )

command median 'returns the median of the given numbers'
  values 'numbers'
  at ( sort values ) ( / ( size values ) 2 )

command medianof 'returns the median of the arguments'
  median arguments

command newarray 'creates an array'
  length 'size of the array'
  local result ( list )
  for i 0 ( - length 1 ) 1 ( Add result 0 )
  return ( ToArray result )

command newdictionary 'creates a new dictionary (actually a new hashtable)'
  Hashtable.new

command parseint32 'parses the given string to an int32'
  string 'string to be parsed'
  Int32.Parse string

command performtest 'tests if a code-block yields the expected result'
  "tokens" 'code to be tested'
  expected 'expected value'
  if
    (
      ==
        (
          local actual ( evaluate tokens )
        )
        expected
    )
    True
    (
      global testsok False
      local code ( ToCode tokens 0 False )
      write 'failure:~n([code])~nactual: [actual]~nexpected: [expected]'
      return False
    )

command power 'computes the power of two numbers'
  a 'base'
  b 'exponent'
  Math.Pow a b

command readfile 'returns the text contained in a file'
  path 'path of the file'
  File.ReadAllText path

command size 'returns the size of an array or a list'
  object 'array or list'
  if
    ( hasmember object 'Length' )
    ( Length object )
    ( Count object )

command sort 'sorts an object (e.g. an array, a list, or a string)'
  object 'object to be sorted'
  switch
    ( isarray object )
    ( sortarray object )
    ( isstring object )
    ( sortstring object )
    (
      Sort object
      return object
    )

command sortarray 'sorts an array'
  object 'array'
  Array.Sort object
  return object

command sortstring 'sorts the characters of a string'
  string 'string'
  local characters ( ToCharArray string )
  Array.Sort characters
  String.new characters

command split 'creates an array by splitting a string at carriage-returns'
  string 'string to be splitted'
  Split string ( at '~n' 0 )

command square 'computes the square of a number'
  n 'number'
  * n n

command stringtail 'returns a string without its first character'
  string 'string'
  if
    ( <= ( size string ) 1 )
    ''
    (
      Substring string 1 ( - ( size string ) 1 )
    )

command sum 'returns the sum of the values of an enumeration'
  values 'values'
  local result 0
  map values
    ( increment result ( besttype item ) )

command sumof 'returns the sum of the arguments'
  sum arguments

command tail 'tail of an object (e.g. an array, a list, or a string)'
  object 'array, list, or string'
  switch
    ( isarray object )
    ( arraytail object )
    ( isstring object )
    ( stringtail object )
    ( listtail object )

command tochar 'converts the first character of a string to type "char"'
  text 'string'
  at text 0

command todouble 'converts an integer value to a double value'
  number 'number to be converted'
  Convert.ToDouble number

command typename 'returns the name of the type of an object'
  object 'object'
  invokeinstancemember 'Name' ( typeof object )

command typeof 'returns the type-object of an object'
  object 'object'
  invokeinstancemember 'GetType' object

command upperbound 'returns the upper-bound of an object (e.g. an array or a list)'
  object 'object'
  return ( - ( size object ) 1 )

command write 'writes text on the console'
  text 'text to be written'
  Console.WriteLine ( ToString text )
  return True

command writefile 'writes text to a file'
  path 'path of the file'
  text 'text to be written'
  File.WriteAllText path text