command addentry
  'adds an entry to a dictionary'
  'the dictionary'
  dictionary 'dictionary'
  key 'key'
  value 'value'
  Add dictionary key value
  return dictionary

command additem
  'adds an item to a collection'
  'the collection'
  collection 'collection'
  value 'value'
  if ( isdictionary collection ) ( if ( not ( containskey collection value ) ) ( addentry collection value ( null ) ) ) ( Add collection value )
  return collection

command arrayof
  'converts the arguments to an array'
  'an array'
  ToArray arguments

command arraytail
  'returns an array without its first element'
  array 'array'
  local limit ( upperbound array )
  local result ( newarray limit 0 )
  if ( <= ( size array ) 1 ) ( arrayof ) ( Array.Copy array 1 result 0 limit )
  return result

command concatenation
  'concatenates the given strings'
  strings 'strings'
  local result ''
  map strings ( increment result item )

command concatenationof
  'concatenates the arguments'
  'the concatenated arguments'
  'the arguments must be strings'
  concatenation arguments

command containskey
  'checks if a collection contains a key'
  collection 'collection'
  key 'key'
  ContainsKey collection key

command dequeue
  'dequeues an element'
  queue 'queue'
  Dequeue queue

command endswith
  'tests if a string ends with an other string'
  string 'string'
  value 'string to be tested for being the ending'
  EndsWith string value

command enqueue
  'enqueues an element'
  queue 'queue'
  value 'element to be enqueued'
  Enqueue queue value
  return value

command gettokens
  'returns the tokenized contents of a string'
  'a list with tokens'
  string 'string'
  local result ( newlist )
  local token ''
  map ( tocharacters string ) (
    if ( iswhitespace item ) (
      if ( notempty token ) (
        additem result token
        local token ''
        )
      )
      ( increment token item )
    )
  if ( notempty token ) ( additem result token )
  return result

command head
  'returns the first element of an object'
  'if a first element can be obtained, it is returned, otherwise an empty list'
  object 'object'
  if ( == ( size object ) 0 ) ( listof ) ( at object 0 )

command isarray
  'tests if an object is an array'
  'if the object is an array, "true" is returned, otherwise "false"'
  'the test returns the value of the "IsArray"-property of the type of the object'
  object 'object'
  invokeinstancemember 'IsArray' ( typeof object )

command isconvertibletoarray
  'test, if an object can be converted to an array'
  'if the object can be converted to an array, "true" is returned, otherwise "false"'
  'the test checks if the object already is an array, or has the method "ToArray"'
  object 'object'
  or ( isarray object ) ( hasmember object 'ToArray' )

command isdictionary
  'tests if an object is a dictionary'
  'if the object is a dictionary, "true" is returned, otherwise "false"'
  'the test checks, if the object is of the Hashtable-type'
  object 'object'
  hastype object 'Hashtable'

command islist
  'tests if an object is a list'
  'if the object is a list, "true" is returned, otherwise "false"'
  'the object can be of the "ArrayList"-type or the generic "List"-type'
  object 'object'
  or ( hastype object 'ArrayList' ) ( hastype object 'List' )

command isset
  'tests if an object is a set'
  'if the object is a set, "true" is returned, otherwise "false"'
  object 'object'
  isdictionary object

command itemadded
  'checks if a collection contains a value and adds the value if necessary'
  'if the value was not in the collection, "true" is returned, otherwise "false"'
  'only applies to collections for which the "containskey" command can be called (e.g. sets)'
  collection 'collection'
  value 'value'
  ( "action" ) 'action if the value was added'
  if ( containskey collection value ) False (
    additem collection value
    if ( not ( isnull action ) ) ( evaluate action )
    return True
    )

command join
  'joins strings to a string separated by a character'
  'a string'
  'the command applies to arrays of strings or any object that can be converted to an array of strings'
  strings 'strings'
  ( separator ' ' ) 'separator'
  String.Join ( if ( isnull separator ) ' ' separator ) ( if ( isarray strings ) strings ( toarray strings ) )

command joinfrom
  'joins the arguments to a string separated by blanks'
  'a string'
  join arguments

command listof
  'returns the arguments as a list'
  'a list'
  return arguments

command listtail
  'returns a list without its first item'
  'the list without the first item'
  items 'listof'
  if ( <= ( size items ) 1 ) ( listof ) ( GetRange items 1 ( - ( size items ) 1 ) )

command multireplace
  'replaces by multiple pairs of searchstring/replacement'
  'the modified string'
  local result ( at arguments 0 )
  for i 1 ( upperbound arguments ) 2 ( set result ( Replace result ( at arguments i ) ( at arguments ( + i 1 ) ) ) )

command newarray
  'creates an array'
  'the new array'
  length 'size of the array'
  initialvalue '(optional) value with which the array is to be initialized'
  local result ( listof )
  if ( not ( isnull initialvalue ) ) ( for i 0 ( - length 1 ) 1 ( Add result initialvalue ) )
  return ( ToArray result )

command newdictionary
  'creates a dictionary'
  'the new dictionary'
  'the dictionary is of type "Hashtable"'
  Hashtable.new

command newlist
  'creates a list'
  'the new list'
  'the type of the list is "ArrayList"'
  ( values ) 'values with which the list is to be initialized'
  if ( isnull values ) ( ArrayList.new ) ( ArrayList.new values )

command newqueue
  'creates a queue'
  'the new queue'
  ( values ) 'value with which the queue is to be initialized'
  if ( == values ( null ) ) ( Queue.new ) ( Queue.new values )

command newset
  'creates a set'
  'the new set'
  newdictionary

command newstack
  'creates a stack'
  'a stack'
  Stack.new

command newstringarrayof
  toarray ( newstringlist arguments )

command newstringlist
  values
  local result (
    Activator.CreateInstance (
      Type.GetType 'System.Collections.Generic.List`1[[System.String, System.Private.CoreLib]], System.Private.CoreLib'
      )
    )
  map values ( Add result ( tostring item ) )
  return result

command newstringlistof
  newstringlist arguments

command pop
  'pops an element'
  'the element popped'
  stack 'stack'
  Pop stack

command prefix
  'return the part of a string which lies before a separator'
  string 'string'
  separator 'separator'
  if ( < ( local index ( IndexOf string separator ) ) 0 ) string ( Substring string 0 index )

command push
  'pushes an element'
  'the element pushed'
  stack 'stack'
  value 'element'
  Push stack value
  return value

command replace
  'replaces a substring'
  'the modified string'
  string 'string to be searched for the search-string'
  searchstring 'string to be searched for'
  replacement 'replacement'
  Replace string searchstring replacement

command sort
  'sorts an object (e.g. an array, a list, or a string)'
  'the sorted object'
  object 'object to be sorted'
  switch ( isarray object ) ( sortarray object ) ( isstring object ) ( sortstring object ) (
    Sort object
    return object
    )

command sortarray
  'sorts an array'
  'the sorted array'
  array 'array'
  Array.Sort array
  return array

command sortstring
  'sorts the characters of a string'
  'the sorted string'
  string 'string'
  local characters ( ToCharArray string )
  Array.Sort characters
  String.new characters

command split
  'creates an array by splitting a string at a separator'
  'an array of strings'
  string 'string to be splitted'
  ( separator '~n' ) 'separator'
  Split string ( newstringarrayof separator ) ( StringSplitOptions.None )

command stringtail
  'returns a string without its first character'
  'the tail of the string'
  string 'string'
  if ( <= ( size string ) 1 ) '' ( Substring string 1 ( - ( size string ) 1 ) )

command substring
  'returns a substring'
  'the substring'
  string 'string'
  start 'start-index of the substring'
  length 'length of the substring'
  if ( < start ( size string ) ) ( Substring string start length ) ( return '' )

command tail
  'tail of an object (e.g. an array, a list, or a string)'
  'the tail of the object'
  'if the object is a list, an array, or can be converted to an array, the proper tail is returned, otherwise the object is converted to a string and its tail is returned'
  object 'object'
  switch ( islist object ) ( listtail object ) ( isconvertibletoarray object ) ( arraytail ( toarray object ) ) ( stringtail ( tostring object ) )

command toarray
  'converts an object to an array'
  'an array'
  'the method can be used all objects, where "isconvertibletoarray" is "true"'
  object 'object'
  switch ( isarray object ) object ( isconvertibletoarray object ) ( ToArray object ) ( listof )

command trimend
  'removes all trailing occurrences of a character from a string'
  string 'string'
  character 'character'
  TrimEnd string ( tochar character )

command upperbound
  'returns the upper-bound of an object (e.g. an array or a list)'
  'the upper-bound'
  'the upper-bound is the size of the object minus one'
  object 'object'
  return ( - ( size object ) 1 )