command accepted
  'ensures that a build action is only executed once' 
  and (!= projectname 'Buildtools') (itemadded handled (local key (join arguments)) (write 'performing [value]'))

command builds
  'performs various initializations'
  'the command always returns "true"'
  global simulatesvn False
  global simulatepostmessagetoteams False
  global msbuildpath ( locatefile visualstudiodirectory 'MSBuild.exe' )
  global vstestconsolepath ( locatefile visualstudiodirectory 'vstest.console.exe' )
  global svnexepath '[programfilesdirectory]\TortoiseSVN\bin\svn.exe'
  global buildlog ( newstringlist )
  global writecallback 'buildwritecallback'
  value True

command buildprojects
  'performs build actions'
  projectfilepatterns 'the patterns triggering a possible action'
  baseprojectsdirectory 'the base-directory'
  actionpacks 'a list of action packs'
  local handled (newset)
  foreach actionpack (split actionpacks '|') ( 
    local actionpackitems (split actionpack ';')
    local actions (at actionpackitems 0)
    local relativeprojectsdirectories (at actionpackitems 1 '\')
    foreach action (split actions ',') (
      if (< 0 (size actionpackitems)) (
        foreach projectfilepattern (split projectfilepatterns ';') (
          foreach relativeprojectsdirectory (split relativeprojectsdirectories ',') (
            foreach projectpath (locatefiles (removetrailingdirectoryseparator '[baseprojectsdirectory]\[relativeprojectsdirectory]') projectfilepattern) (
              local projectdirectory (getdirectory projectpath) 
			  local projectname (getfilename projectdirectory)
              run action))))
        (run action))) 

command buildwritecallback
  'if this callback is set, it is called, when text are to be displayed'
  message 'the message to be displayed'
  if (not (isnullorwhitespace message))
    (Console.Write (replaceexhaustive message '~r~n~r~n' '~r~n'))
  additem buildlog (trimend message '~n')

command checkin
  'performs a svn-checkin'
  branchdirectory 'the directory to check in'
  commitmessage 'the commit-message'
  svn 'commit -m "[commitmessage]" "[branchdirectory]"'

command cleanup
  'performs a svn-cleanup'
  branchdirectory 'the directory to update'
  local exitcode 0
  svn 'cleanup "[branchdirectory]"'

command merge
  'performs a svn merge action'
  fromrepositoryurl 'repository from which the merge should be performed'
  toworkspacedirectory 'workspace to which the merge should be performed'
  svn 'merge --accept theirs-conflict "[fromrepositoryurl]" "[toworkspacedirectory]"'

command mergeup
  'performs a svn merge-up action'
  branchesurl 'repository-directory in which the branches are located' 
  startworkspacedirectory 'worksspace-directory from which the merges should start'
  commitmessage 'the commit-message'
  local workspacesdirectory ( getdirectory startworkspacedirectory )
  foreachdirectorypair workspacesdirectory fromworkspacedirectory toworkspacedirectory (
    local frombranch ( getfname fromworkspacedirectory )
    if ( < startworkspacedirectory toworkspacedirectory ) (
      if ( == ( update toworkspacedirectory ) 0 ) (
        if (== (merge '[branchesurl]/[frombranch]' toworkspacedirectory ) 0)
          ( checkin toworkspacedirectory commitmessage ))))

command monitorrepository
  'monitors a repository for changes and starts an action if a change occurs'
  workspacedirectory 'workspace associated with a repository'
  checkcontinuously 'if "true", the test is run indefinitely, if "false" the test is performed only once.'
  intervall 'the intervall in milliseconds between checks'
  performactiononfirstpass 'if "true" the action is always carried out on the first pass, if "false" the check is carried out on the first pass too'
  "action" 'the action to be performed when a change occurs'
  local result ''
  local revisionpath '[workspacedirectory]\revision.txt'
  local isfirstpass True
  local continue True
  while (value continue) (
    local oldrevision ( readfile revisionpath '0' )
    local newrevision ( mostrecentrevision workspacedirectory )
    write '[oldrevision] / [newrevision]'
    if (or (!= oldrevision newrevision ) ( and performactiononfirstpass isfirstpass )) (
      writefile revisionpath newrevision
      set result ( evaluate action ))
    set continue checkcontinuously
    set isfirstpass False
    sleep intervall)
  value result

command mostrecentrevision
  'Returns the most recently checked-in revision in a svn-repository'
  'The most recently checked-in revision'
  workspacedirectory 'directory of a workspace associated with a svn-repository'
  run workspacedirectory svnexepath 'info --revision HEAD --show-item last-changed-revision'

command postmessagetoteams
  'posts a message to a teams-channel'
  title 'title'
  message 'message'
  hook 'hook-url of the channel'
  if (value simulatepostmessagetoteams)
    (write 'simulating postmessagetoteams:~n[title]~n[message]') (
    value (
      invokeinstancemember 'Result' (
        PostAsync ( HttpClient.new ) ( Uri.new hook ) (
          StringContent.new '{"Title":"[title]","Text":"[message]"}' ( Encoding.UTF8 ) 'application/json'))))
 	
command svn
  'executes a svn-command'
  svnarguments 'arguments to be passed to svn'
  local exitcode 0
  if (value simulatesvn)
    (write 'simulating svn: [svnarguments]')
	(run branchdirectory "[svnexepath]" [svnarguments])
  value exitcode

command update
  'performs a svn-update'
  branchdirectory 'the directory to update'
  svn 'update: "[svnexepath]" update "[branchdirectory]"'
