command comparefiles
  'compares two files'
  path1 'path to the first file'
  path2 'path to the second file'
  separator 'line-comment separator'
  local lines1 ( split ( readfile path1 ) '~n' )
  local lines2 ( split ( readfile path2 ) '~n' )
  for i 0 ( Math.Min ( upperbound lines1 ) ( upperbound lines2 ) ) 1 (
    if (
      != ( prefix ( at lines1 i ) separator ) ( prefix ( at lines2 i ) separator )
      )
      ( break )
    )
  return ( if ( and ( == i ( size lines1 ) ) ( == i ( size lines2 ) ) ) -1 i )

command inputbox
  prompt
  ( title 'input' )
  ( default '' )
  Interaction.InputBox prompt title default -1 -1

command readfile
  'returns the text contained in a file'
  'the text contained in the file'
  path 'path of the file'
  ( default '' ) 'default value if the file does not exist'
  if ( fileexists path ) ( File.ReadAllText path ) default

command write
  'writes text on the console'
  'the text written'
  text 'text to be written'
  ( verbosity 5 ) 'the verbosity-level of the message'
  Helpers.WriteLine ( ToString text ) ( if ( isnull verbosity ) 5 verbosity )
  return text

command writefile
  'writes text to a file'
  'the text written'
  path 'path of the file'
  text 'text to be written'
  File.WriteAllText path text
  return text