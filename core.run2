command addentry
  'adds an entry to a dictionary'
  'the dictionary'
  dictionary 'dictionary'
  key 'key'
  value 'value'
  Add dictionary key value
  return dictionary

command additem
  'adds an item to a collection'
  'the collection'
  collection 'collection'
  value 'value'
  if ( isdictionary collection ) ( if ( not ( containskey collection value ) ) ( addentry collection value ( null ) ) ) ( Add collection value )
  return collection

command arrayof
  'converts the arguments to an array'
  'an array'
  ToArray arguments

command arraytail
  'returns an array without its first element'
  array 'array'
  local limit ( upperbound array )
  local result ( newarray limit 0 )
  if ( <= ( size array ) 1 ) ( arrayof ) ( Array.Copy array 1 result 0 limit )
  return result

command average
  'computes the average of the given values'
  'the average'
  values 'values'
  / ( todouble ( sum values ) ) ( size values )

command averageof
  'computes the average of the arguments'
  'the average'
  average arguments

command besttype
  'tries to find the best type for the given object'
  object 'object'
  if ( isstring object ) ( switch ( canparseint32 object ) ( toint32 object ) object ) object

command canparseint32
  'tests whether the specified string can be parsed to an int32'
  string 'string'
  Int32.TryParse string 0

command concatenation
  'concatenates the given strings'
  strings 'strings'
  local result ''
  map strings ( increment result item )

command concatenationof
  'concatenates the arguments'
  'the concatenated arguments'
  'the arguments must be strings'
  concatenation arguments

command containskey
  'checks if a collection contains a key'
  collection 'collection'
  key 'key'
  ContainsKey collection key

command copyfiles
  'copies files from one location to another'
  sourcedirectory 'directory to copy from'
  sourcespecification 'name of the file to copy or a pattern (e.g. "*.run2")'
  destinationdirectory 'directory to copy to'
  destinationfilename 'name of the file after beeing copied; if "null" or empty, the filename remains unchanged'
  expandincludes 'if true, includes are expanded'
  ( lineaction ) 'action to be performed on every line'
  Helpers.CopyFiles sourcedirectory sourcespecification destinationdirectory destinationfilename expandincludes lineaction

command createdirectory
  'creates specified directory'
  directory 'directory to be created'
  Directory.CreateDirectory directory

command decrement
  'decrements a variable'
  "name" 'name of the variable'
  ( amount 1 ) 'the value subtracted from the original value of the varable'
  set True name ( - ( get name ) amount )

command deletedirectory
  'deletes specified directory'
  directory 'directory to be deleted'
  Directory.Delete directory ( return True )

command dequeue
  'dequeues an element'
  queue 'queue'
  Dequeue queue

command dir
  'executes the Windows command "dir" and returns the result'
  dos 'dir' ( join arguments )

command directoryexists
  'tests wether the specified directory exists'
  directory 'directory to be tested for existence'
  Directory.Exists directory

command directoryseparator
  'returns the directory-separator'
  Path.DirectorySeparatorChar

command dos
  'executes specified dos-command and returns the output'
  if ( directoryexists ( at arguments 0 ) ) ( run ( at arguments 0 ) cmd /c ( join ( tail arguments ) ) ) ( run cmd /c ( join arguments ) )

command endswith
  'tests if a string ends with an other string'
  string 'string'
  value 'string to be tested for being the ending'
  EndsWith string value

command enqueue
  'enqueues an element'
  queue 'queue'
  value 'element to be enqueued'
  Enqueue queue value
  return value

command factorial
  'computes the factorial of a number'
  number 'number'
  if ( == number 1 ) 1 ( * ( factorial ( - number 1 ) ) number )

command fileexists
  'checks if a file exists'
  path 'path of the file'
  File.Exists path

command finddirectory
  'gets the directory with the given name'
  directory 'directory from where to search upwards'
  name 'name'
  local result ''
  while ( != directory ( null ) ) (
    if ( == ( getfname directory ) name ) ( local result ( break directory ) )
    local directory ( getdirectory directory )
    )
  return result

command finddirectorywithparent
  'finds the directory whose parent has the given name'
  directory 'directory from where to search upwards'
  parent 'name of the parent'
  local result ''
  local parentdirectory ( getdirectory directory )
  while ( != parentdirectory ( null ) ) (
    if ( == ( getfname parentdirectory ) parent ) ( local result ( break directory ) )
    local directory parentdirectory
    local parentdirectory ( getdirectory parentdirectory )
    )
  return result

command foreachdirectorypair
  'sorts the subdirectories of a directory and performs an action on each pair of subdirectory and immediately following subdirectory'
  directory 'directory to iterate'
  "name1" 'name of the variable to receive the subdirectory1'
  "name2" 'name of the variable to receive the subdirectory2'
  "action" 'action to be performed'
  local directories ( sort ( getdirectories directory ) )
  for i 0 ( - ( size directories ) 2 ) 1 (
    local True name1 ( at directories i )
    local True name2 ( at directories ( + i 1 ) )
    evaluate action
    )

command getdirectories
  'returns an array of the subdirectories in a directory'
  directory 'directory'
  Directory.GetDirectories directory

command getdirectory
  'gets the directory from a path'
  path 'path'
  Path.GetDirectoryName path

command getextension
  'gets the extension from a path'
  path 'path'
  Path.GetExtension path

command getfilename
  'gets the filename from a path'
  path 'path'
  Path.GetFileName path

command getfiles
  'returns an array of paths of the files in a directory'
  directory 'directory'
  Directory.GetFiles directory

command getfname
  'gets the filename without extension from a path'
  path 'path'
  Path.GetFileNameWithoutExtension path

command getmember
  'get the array of member-information for the specified member in an object'
  'an array of "MemberInfo"-values'
  object 'object'
  name 'name of the member'
  invokeinstancemember 'GetMember' ( typeof object ) name

command gettokens
  'returns the tokenized contents of a string'
  'a list with tokens'
  string 'string'
  local result ( newlist )
  local token ''
  map ( tocharacters string ) (
    if ( iswhitespace item ) (
      if ( notempty token ) (
        additem result token
        local token ''
        )
      )
      ( increment token item )
    )
  if ( notempty token ) ( additem result token )
  return result

command getvariable
  'returns the value of a variable'
  'the value of the variable'
  'enables the variable value to be retrieved by preventing the name from being evaluated'
  "name" 'name of the variable'
  get name

command hasmember
  'tests if the specified member exists in an object'
  'if the object has the specified member, "true" is returned, otherwise "false"'
  object 'object'
  name 'name of the member'
  > ( Length ( getmember object name ) ) 0

command hastype
  'tests if an object has the given type'
  'if the object has the given type, "true" is returned, otherwise "false"'
  object 'object'
  name 'name of the type'
  == ( typename object ) name

command head
  'returns the first element of an object'
  'if a first element can be obtained, it is returned, otherwise an empty list'
  object 'object'
  if ( == ( size object ) 0 ) ( listof ) ( at object 0 )

command increment
  'increments a variable'
  'the incremented value of the variable'
  'incrementing a string by a string means appending one string to the other'
  "name" 'name of the variable'
  ( amount 1 ) 'the value added to the original value of the variable'
  set True name ( + ( get name ) amount )

command system.core
  'performs various initializations'
  'the command always returns "true"'
  global windowsdirectory windir
  global programfilesdirectory ProgramFiles
  global programfiles32directory 'ProgramFiles(x86)'
  global visualstudiodirectory ( locatedirectory '[programfiles32directory]\Microsoft Visual Studio' '????' )
  global run2projectdirectory ( finddirectory programdirectory 'Run2' )
  global now ( DateTime.Now )
  global currentyear ( ToString ( Year now ) 'D4' )
  global currentmonth ( ToString ( Month now ) 'D2' )
  global currentday ( ToString ( Day now ) 'D2' )
  return True

command inputbox
  prompt
  ( title 'input' )
  ( default '' )
  Interaction.InputBox prompt title default -1 -1

command isarray
  'tests if an object is an array'
  'if the object is an array, "true" is returned, otherwise "false"'
  'the test returns the value of the "IsArray"-property of the type of the object'
  object 'object'
  invokeinstancemember 'IsArray' ( typeof object )

command ischar
  'tests if an object is a "char"-value'
  'a "bool"-value'
  'if the object is a "char"-value, "true" is returned, otherwise "false"'
  object 'object'
  hastype object 'Char'

command isconvertibletoarray
  'test, if an object can be converted to an array'
  'if the object can be converted to an array, "true" is returned, otherwise "false"'
  'the test checks if the object already is an array, or has the method "ToArray"'
  object 'object'
  or ( isarray object ) ( hasmember object 'ToArray' )

command isdictionary
  'tests if an object is a dictionary'
  'if the object is a dictionary, "true" is returned, otherwise "false"'
  'the test checks, if the object is of the Hashtable-type'
  object 'object'
  hastype object 'Hashtable'

command isempty
  'checks wether an object is isempty'
  'if the object is empty, "true" is returned, otherwise "false"'
  object 'object'
  == ( size object ) 0

command islist
  'tests if an object is a list'
  'if the object is a list, "true" is returned, otherwise "false"'
  'the object can be of the "ArrayList"-type or the generic "List"-type'
  object 'object'
  or ( hastype object 'ArrayList' ) ( hastype object 'List' )

command isnull
  'tests, if an object has the value "null"'
  'if the object has the value "null", "true" is returned, otherwise "false"'
  object 'object'
  == object ( null )

command isnullorempty
  string
  String.IsNullOrEmpty string

command isset
  'tests if an object is a set'
  'if the object is a set, "true" is returned, otherwise "false"'
  object 'object'
  isdictionary object

command isstring
  'tests if an object is a "string"-value'
  'a "bool"-value'
  'if the object is a "string"-value, "true" is returned, otherwise "false"'
  object 'object'
  hastype object String

command iswhitespace
  'checks if a value is white space'
  'if the character is white space, "true" is returned, otherwise "false"'
  value 'value to be checked'
  Char.IsWhiteSpace ( tochar value )

command itemadded
  'checks if a collection contains a value and adds the value if necessary'
  'if the value was not in the collection, "true" is returned, otherwise "false"'
  'only applies to collections for which the "containskey" command can be called (e.g. sets)'
  collection 'collection'
  value 'value'
  ( "action" ) 'action if the value was added'
  if ( containskey collection value ) False (
    additem collection value
    if ( not ( isnull action ) ) ( evaluate action )
    return True
    )

command join
  'joins strings to a string separated by a character'
  'a string'
  'the command applies to arrays of strings or any object that can be converted to an array of strings'
  strings 'strings'
  ( separator ' ' ) 'separator'
  String.Join ( if ( isnull separator ) ' ' separator ) ( if ( isarray strings ) strings ( toarray strings ) )

command joinfrom
  'joins the arguments to a string separated by blanks'
  'a string'
  join arguments

command listof
  'returns the arguments as a list'
  'a list'
  return arguments

command listtail
  'returns a list without its first item'
  'the list without the first item'
  items 'listof'
  if ( <= ( size items ) 1 ) ( listof ) ( GetRange items 1 ( - ( size items ) 1 ) )

command locatedirectories
  'searches directories'
  'an array of all directories that could be found'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return ( Helpers.LocateDirectories basedirectory pattern )

command locatedirectory
  'searches for a directory'
  'if the directory could be found, the directory is returned, otherwise an empty string'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return ( Helpers.LocateDirectory basedirectory pattern )

command locatefile
  'searches for a file'
  'if the file could be found, the path of the file is returned, otherwise an empty string'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return ( Helpers.LocateFile basedirectory pattern )

command locatefiles
  'searches files'
  'an array of all paths that could be found'
  basedirectory 'directory in which the search should begin'
  pattern 'pattern to be searched for'
  return ( Helpers.LocateFiles basedirectory pattern )

command median
  'returns the median of the given numbers'
  'the median'
  values 'numbers'
  at ( sort values ) ( / ( size values ) 2 )

command medianof
  'returns the median of the arguments'
  'the median'
  median arguments

command multireplace
  'replaces by multiple pairs of searchstring/replacement'
  'the modified string'
  local result ( at arguments 0 )
  for i 1 ( upperbound arguments ) 2 ( set result ( Replace result ( at arguments i ) ( at arguments ( + i 1 ) ) ) )

command newarray
  'creates an array'
  'the new array'
  length 'size of the array'
  initialvalue '(optional) value with which the array is to be initialized'
  local result ( listof )
  if ( not ( isnull initialvalue ) ) ( for i 0 ( - length 1 ) 1 ( Add result initialvalue ) )
  return ( ToArray result )

command newdictionary
  'creates a dictionary'
  'the new dictionary'
  'the dictionary is of type "Hashtable"'
  Hashtable.new

command newlist
  'creates a list'
  'the new list'
  'the type of the list is "ArrayList"'
  ( values ) 'values with which the list is to be initialized'
  if ( isnull values ) ( ArrayList.new ) ( ArrayList.new values )

command newqueue
  'creates a queue'
  'the new queue'
  ( values ) 'value with which the queue is to be initialized'
  if ( == values ( null ) ) ( Queue.new ) ( Queue.new values )

command newset
  'creates a set'
  'the new set'
  newdictionary

command newstack
  'creates a stack'
  'a stack'
  Stack.new

command not
  'negates a truth value'
  'if the value is "false", "true" is returned, otherwise "false"'
  value 'truth value'
  if ( return value ) False True

command notempty
  'checks if an object is not empty'
  'if the object is empty, "false" is returned, otherwise "true"'
  object 'object'
  not ( isempty object )

command pop
  'pops an element'
  'the element popped'
  stack 'stack'
  Pop stack

command power
  'computes the power of two numbers'
  'the power'
  a 'base'
  b 'exponent'
  Math.Pow a b

command primes
  'computes the primes up to n'
  'a list of primes up to n'
  n 'upper limit'
  local result ( newlist )
  local table ( newarray ( + n 1 ) True )
  for i 3 n 2 (
    if ( at table i ) (
      additem result i
      for j i n i ( put table j False )
      )
    )
  return result

command push
  'pushes an element'
  'the element pushed'
  stack 'stack'
  value 'element'
  Push stack value
  return value

command quote
  'returns the unevaluated value'
  'the unenvaluated value'
  "value" 'value'
  return value

command readfile
  'returns the text contained in a file'
  'the text contained in the file'
  path 'path of the file'
  ( default '' ) 'default value if the file does not exist'
  if ( fileexists path ) ( File.ReadAllText path ) default

command removetrailingdirectoryseparator
  'removes all trailing occurrences of the directory-separator from a path'
  path 'path'
  trimend path ( directoryseparator )

command replace
  'replaces a substring'
  'the modified string'
  string 'string to be searched for the search-string'
  searchstring 'string to be searched for'
  replacement 'replacement'
  Replace string searchstring replacement

command size
  'returns the size of an object (e.g. an array, a list, or a string)'
  'the size of the object'
  object 'object'
  if ( hasmember object 'Length' ) ( Length object ) ( Count object )

command sleep
  'sleeps for the given amount of time'
  timeout 'the timeout in milliseconds'
  Thread.Sleep timeout

command sort
  'sorts an object (e.g. an array, a list, or a string)'
  'the sorted object'
  object 'object to be sorted'
  switch ( isarray object ) ( sortarray object ) ( isstring object ) ( sortstring object ) (
    Sort object
    return object
    )

command sortarray
  'sorts an array'
  'the sorted array'
  array 'array'
  Array.Sort array
  return array

command sortstring
  'sorts the characters of a string'
  'the sorted string'
  string 'string'
  local characters ( ToCharArray string )
  Array.Sort characters
  String.new characters

command split
  'creates an array by splitting a string at a separator'
  'an array of strings'
  string 'string to be splitted'
  ( separator '~n' ) 'separator'
  Split string ( tochar ( if ( isnull separator ) '~n' separator ) )

command square
  'computes the square of a number'
  'the square of the number'
  n 'number'
  * n n

command stringtail
  'returns a string without its first character'
  'the tail of the string'
  string 'string'
  if ( <= ( size string ) 1 ) '' ( Substring string 1 ( - ( size string ) 1 ) )

command substring
  'returns a substring'
  'the substring'
  string 'string'
  start 'start-index of the substring'
  length 'length of the substring'
  if ( < start ( size string ) ) ( Substring string start length ) ( return '' )

command sum
  'returns the sum of the given values'
  'the sum'
  'the values must be numbers'
  values 'values'
  local result 0
  map values ( increment result ( besttype item ) )

command sumof
  'returns the sum of the arguments'
  'the sum'
  sum arguments

command tail
  'tail of an object (e.g. an array, a list, or a string)'
  'the tail of the object'
  'if the object is a list, an array, or can be converted to an array, the proper tail is returned, otherwise the object is converted to a string and its tail is returned'
  object 'object'
  switch ( islist object ) ( listtail object ) ( isconvertibletoarray object ) ( arraytail ( toarray object ) ) ( stringtail ( tostring object ) )

command toarray
  'converts an object to an array'
  'an array'
  'the method can be used all objects, where "isconvertibletoarray" is "true"'
  object 'object'
  switch ( isarray object ) object ( isconvertibletoarray object ) ( ToArray object ) ( listof )

command tobiginteger
  'converts a number to a BigInteger'
  'a "BigInteger"-value'
  BigInteger.Parse ( tostring value )

command tochar
  'converts the value to "char"-value'
  'a "char"-value'
  'if the value is already a "char"-value, it is returned, otherwise the value is converted to a string and the first character is returned'
  value 'value'
  if ( ischar value ) value ( at ( tostring value ) 0 )

command tocharacters
  'converts a string to an array of characters'
  'an array of characters'
  string 'string'
  ToCharArray string

command todouble
  'converts value to a "double"-value'
  'a double-value'
  value 'number to be converted'
  Convert.ToDouble ( tostring value )

command toint32
  'converts a value to an "int32"-value'
  'an "int32"-value'
  'the value can be a number or a string'
  value 'value to be converted'
  Int32.Parse ( tostring value )

command tostring
  'converts an object to a string'
  'a "string"-value'
  object 'object'
  ToString object

command trimend
  'removes all trailing occurrences of a character from a string'
  string 'string'
  character 'character'
  TrimEnd string ( tochar character )

command typename
  'returns the name of the type of an object'
  'the name of the type'
  object 'object'
  invokeinstancemember 'Name' ( typeof object )

command typeof
  'returns the type-object of an object'
  'the type-object'
  object 'object'
  invokeinstancemember 'GetType' object

command upperbound
  'returns the upper-bound of an object (e.g. an array or a list)'
  'the upper-bound'
  'the upper-bound is the size of the object minus one'
  object 'object'
  return ( - ( size object ) 1 )

command write
  'writes text on the console'
  'the text written'
  text 'text to be written'
  ( verbosity 5 ) 'the verbosity-level of the message'
  Helpers.WriteLine ( ToString text ) ( if ( isnull verbosity ) 5 verbosity )
  return text

command writefile
  'writes text to a file'
  'the text written'
  path 'path of the file'
  text 'text to be written'
  File.WriteAllText path text
  return text