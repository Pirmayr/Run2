loadscript ISS

command invoketests
  'invokes the tests'
  'if all tests succeeded, true is returned, otherwise false'
  global testsok True
  performtest ( performtests ) True
  write ( if testsok 'tests ok' 'tests failed' )
  return testsok

command performtest
  'tests if a code-block yields the expected result'
  'if the test succeeds true ist returned, otherwise false'
  "code" 'code to be tested'
  expected 'expected value'
  if ( == ( local actual ( evaluate code ) ) expected ) True (
    global testsok False
    local code ( CodeFormatter.ToCode code 0 False )
    write 'failure:~n([code])~nactual: [actual]~nexpected: [expected]'
    return False
    )

command performtests
  'performs various tests'
  'if all tests succeeded, true is returned, otherwise false'
  performtest ( + 47 11 ) 58
  performtest ( - 47 11 ) 36
  performtest ( * 47 11 ) 517
  performtest ( / 47 11 ) 4
  performtest ( < ( - ( / 22.0 7.0 ) 3.142857 ) 0.000001 ) True
  performtest ( == 47 11 ) False
  performtest ( != 47 11 ) True
  performtest ( < 47 11 ) False
  performtest ( <= 47 11 ) False
  performtest ( > 47 11 ) True
  performtest ( >= 47 11 ) True
  performtest ( == ( arrayof 1 2 3 ) ( arrayof 1 2 3 ) ) True
  performtest ( == ( arrayof 1 2 3 ) ( arrayof 1 2 4 ) ) False
  performtest ( == ( arrayof 1 2 3 4 ) ( arrayof 1 2 3 ) ) False
  performtest ( sum ( arrayof 1 2 3 ) ) 6
  performtest ( sumof 1 2 3 ) 6
  performtest ( averageof 1 2 3 4 ) 2.5
  performtest ( average ( arrayof 1 2 3 4 ) ) 2.5
  performtest ( square 2 ) 4
  performtest ( factorial 50 ) 30414093201713378043612608166064768844377641568960512000000000000
  performtest ( ToString ( at 'Hello' 1 ) ) 'e'
  performtest (
    local result 0
    for i 1 10 1 ( local result ( + result i ) )
    )
    55
  performtest (
    local result 0
    foreach i ( arrayof 3 1 4 1 ) ( local result ( + result i ) )
    )
    9
  performtest (
    local product 1
    map ( arrayof 3 1 4 1 ) ( local product ( * product item ) )
    )
    12
  performtest ( Length 'Hello World!' ) 12
  performtest ( at ( split 'Hello~nworld!' ) 1 ) 'world!'
  performtest ( Count ( listof 1 2 3 4 5 ) ) 5
  performtest ( upperbound ( arrayof 1 2 3 ) ) 2
  performtest ( upperbound ( split 'Hello~nworld' ) ) 1
  performtest ( size 'hello' ) 5
  performtest ( size ( arrayof 1 2 3 4 5 6 ) ) 6
  performtest ( size ( listof 1 2 3 4 5 6 7 ) ) 7
  performtest ( typename 'Hello' ) 'String'
  performtest ( hasmember 'hello' 'Length' ) True
  performtest ( hasmember 'hello' 'Count' ) False
  performtest ( power 3 4 ) 81
  performtest ( dos echo 'hello world' ) 'hello world'
  performtest ( multireplace 'Hello World!' 'Hello' 'Good' 'World' 'Bye' ) 'Good Bye!'
  performtest (
    createdirectory c:\testdirectory
    directoryexists c:\testdirectory
    )
    True
  performtest (
    createdirectory c:\testdirectory\subdirectory1
    createdirectory c:\testdirectory\subdirectory2
    createdirectory c:\testdirectory\subdirectory3
    size ( getdirectories c:\testdirectory )
    )
    3
  performtest (
    local result ''
    foreachdirectorypair c:\testdirectory directory1 directory2 (
      increment result directory1
      increment result directory2
      )
    return result
    )
    'c:\testdirectory\subdirectory1c:\testdirectory\subdirectory2c:\testdirectory\subdirectory2c:\testdirectory\subdirectory3'
  performtest (
    writefile c:\testdirectory\hello.txt hello
    readfile c:\testdirectory\hello.txt
    )
    'hello'
  performtest (
    writefile c:\testdirectory\world.txt world
    readfile c:\testdirectory\world.txt
    )
    'world'
  performtest (
    writefile c:\testdirectory\values.txt '6~n1~n7~n8~n5~n9'
    average ( split ( readfile c:\testdirectory\values.txt ) )
    )
    6
  performtest ( size ( getfiles c:\testdirectory ) ) 3
  performtest (
    copyfiles c:\testdirectory values.txt c:\testdirectory values1.txt False
    fileexists c:\testdirectory\values1.txt
    )
    True
  performtest (
    deletedirectory c:\testdirectory
    directoryexists c:\testdirectory
    )
    False
  performtest ( sortstring 'foobar' ) 'abfoor'
  performtest ( sort 'hello' ) 'ehllo'
  performtest ( sort ( split '3~n1~n4~n1~n5~n9' ) ) ( arrayof '1' '1' '3' '4' '5' '9' )
  performtest ( sort ( split '3;1;4;1;5;9' ';' ) ) ( arrayof '1' '1' '3' '4' '5' '9' )
  performtest (
    global value 4711
    increment value 1
    return value
    )
    4712
  performtest (
    local value 1234
    increment value 2
    return value
    )
    1236
  performtest (
    global dictionary ( newdictionary )
    addentry dictionary 'foo' 'bar'
    addentry dictionary 'hello' 'world'
    size dictionary
    )
    2
  performtest ( switch ( < 1 1 ) ( return 1 ) ( == 1 1 ) ( return 2 ) ( > 1 1 ) ( return 3 ) ) 2
  performtest (
    local a 4711
    set a 1234
    )
    1234
  performtest ( join ( arrayof 'h' 'e' 'l' 'l' 'o' ) ) 'h e l l o'
  performtest ( joinfrom 'h' 'e' 'l' 'l' 'o' ) 'h e l l o'
  performtest ( if ( < 1 1 ) ( return 0 ) ( return 1 ) ) 1
  performtest ( locatedirectory SystemRoot System32 ) '[SystemRoot]\System32'
  performtest ( locatefile SystemRoot notepad.exe ) '[SystemRoot]\notepad.exe'
  performtest ( hastype 'hello' String ) True
  performtest ( concatenation ( arrayof foo bar ) ) foobar
  performtest ( concatenationof Hello ' ' World! ) 'Hello World!'
  performtest (
    local foobar 4711
    quote foobar
    )
    foobar
  performtest (
    > (
size (
        local verbositylevel 6
        dir SystemRoot
        )
      )
      0
    )
    True
  performtest ( endswith 'Hello World!' 'World!' ) True
  performtest ( > ( size ( getmember 'Hello' 'Split' ) ) 0 ) True
  performtest ( isarray ( arrayof 1 2 3 ) ) True
  performtest ( sortarray ( arrayof 3 1 4 1 5 9 2 6 0 ) ) ( arrayof 0 1 1 2 3 4 5 6 9 )
  performtest ( isstring 'Hello' ) True
  performtest ( joinfrom ( typename 1 ) ( typename ( todouble 1 ) ) ) 'Int32 Double'
  performtest ( typename ( typeof 'foobar' ) ) RuntimeType
  performtest ( write 'foobar' ) 'foobar'
  performtest ( size ( newarray 1000 0 ) ) 1000
  performtest (
    local values ( newarray 1000 0 )
    put values 100 'foobar'
    at values 100
    )
    'foobar'
  performtest ( String.new ( tochar 'a' ) 10 ) 'aaaaaaaaaa'
  performtest ( head ( arrayof 1 2 3 4 ) ) 1
  performtest ( head ( listof 4 7 1 1 ) ) 4
  performtest ( arraytail ( arrayof 4 7 1 1 ) ) ( arrayof 7 1 1 )
  performtest ( listtail ( listof 4 7 1 1 ) ) ( listof 7 1 1 )
  performtest ( stringtail 'Hello' ) 'ello'
  performtest ( tail ( arrayof 1 2 3 4 ) ) ( arrayof 2 3 4 )
  performtest ( median ( arrayof 5 3 2 4 1 ) ) 3
  performtest ( medianof 5 3 2 4 1 ) 3
  performtest ( size ( additem ( listof 1 2 3 ) 4 ) ) 4
  performtest ( besttype '4711' ) 4711
  performtest ( canparseint32 'foobar' ) False
  performtest ( canparseint32 '1234' ) True
  performtest ( toint32 '4321' ) 4321
  performtest ( for i 1 10 1 ( if ( == i 5 ) ( break i ) i ) ) 5
  performtest ( < ( - ( Math.Sin 1.0 ) 0.84147 ) 0.000001 ) True
  performtest (
    local queue ( newqueue )
    enqueue queue 47
    enqueue queue 11
    dequeue queue
    )
    47
  performtest (
    local stack ( newstack )
    push stack 47
    push stack 11
    pop stack
    )
    11
  performtest (
    local a 4711
    decrement a 11
    return a
    )
    4700
  performtest ( size ( primes 1000 ) ) 167
  performtest ( islist ( listof ) ) True
  performtest ( islist ( arrayof ) ) False
  performtest ( islist ( newlist ) ) True
  performtest ( isdictionary ( newdictionary ) ) True
  performtest ( isarray ( arrayof ) ) True
  performtest ( isarray ( newarray 100 0 ) ) True
  performtest ( dequeue ( newqueue ( listof 1 2 3 ) ) ) 1
  performtest ( size ( newqueue ( listof 1 2 3 ) ) ) 3
  performtest ( iswhitespace ( tochar 'a' ) ) False
  performtest ( iswhitespace ( tochar ' ' ) ) True
  performtest ( iswhitespace ( tochar 4711 ) ) False
  performtest ( not True ) False
  performtest ( isempty ( listof ) ) True
  performtest ( isempty ( listof 1 2 3 ) ) False
  performtest ( notempty ( arrayof ) ) False
  performtest ( notempty ( arrayof 1 2 3 ) ) True
  performtest ( size ( gettokens 'the big brown fox' ) ) 4
  performtest ( typename ( tocharacters 'Hello World!' ) ) 'Char[]'
  performtest ( fileexists ( locatefile basedirectory LICENSE ) ) True
  performtest ( fileexists ( locatefile basedirectory DOESNOTEXIST ) ) False
  performtest ( size ( gettokens ( readfile ( locatefile basedirectory LICENSE ) ) ) ) 168
  performtest ( getfname 'C:\Windows\System32' ) 'System32'
  performtest ( finddirectorywithparent 'C:\Windows\System32\drivers' 'Windows' ) 'C:\Windows\System32'
  performtest ( finddirectory 'C:\Windows\System32\drivers' 'Windows' ) 'C:\Windows'
  performtest ( getdirectory 'C:\Windows\notepad.exe' ) 'C:\Windows'
  performtest ( getfilename 'C:\Windows\notepad.exe' ) 'notepad.exe'
  performtest ( replace 'Hello World!' 'Hello' 'Bye' ) 'Bye World!'
  performtest ( substring 'Hello World!' 1 4 ) 'ello'
  performtest (
    local value 'foo'
    increment value 'bar'
    return value
    )
    'foobar'
  performtest ( typename ( tobiginteger 4711 ) ) 'BigInteger'
  performtest ( typename ( tobiginteger '4711' ) ) 'BigInteger'
  performtest ( typename ( toint32 4711 ) ) 'Int32'
  performtest ( typename ( toint32 '4711' ) ) 'Int32'
  performtest ( typename ( todouble 4711 ) ) 'Double'
  performtest ( typename ( todouble '4711' ) ) 'Double'
  performtest ( ischar ( tochar 'hello' ) ) True
  performtest ( ischar ( tochar 4711 ) ) True
  performtest ( tail 4711 ) '711'
  performtest (
    tail (
      local queue ( newqueue )
      enqueue queue 47
      enqueue queue 11
      return queue
      )
    )
    ( arrayof 11 )
  performtest ( trimend 'c:\windows\' '\' ) 'c:\windows'
  performtest ( removetrailingdirectoryseparator 'c:\windows\' ) 'c:\windows'
  performtest ( getfilename ( removetrailingdirectoryseparator 'c:\windows\system32\' ) ) 'system32'
  performtest ( getextension 'c:\windows\notepad.exe' ) '.exe'
  performtest ( isset ( newset ) ) True
  performtest (
    local testset ( newset )
    additem testset 4711
    additem testset 4711
    containskey testset 4711
    )
    True
  performtest ( isnull ( newset ) ) False
  performtest ( isconvertibletoarray ( newlist ) ) True
  performtest ( directoryseparator ) ( tochar '\' )
  performtest ( size ( locatedirectories c:\windows 'system' ) ) 1
  performtest ( size ( locatefiles c:\windows\system32 kernel32.dll ) ) 1
  performtest ( isarray ( toarray ( newlist ) ) ) True
  performtest ( isstring ( tostring 4711 ) ) True
  performtest ( checkin c:\ 'hi' True ) 0
  performtest ( cleanup c:\ True ) 0
  performtest (
    local value 1
    increment value
    return value
    )
    2
  performtest (
    local testset ( newset )
    itemadded testset 'hello'
    )
    True
  performtest ( at ( split 'foo//bar' '//' ) 0 ) 'foo'
  if ( return alltests ) ( write ( invokeinstancemember 'ReasonPhrase' ( postmessagetoteams 'title6' 'text6' teamshook ) ) )
  if ( and ( return False ) ( directoryexists run2projectdirectory ) ) (
    performtest ( typename ( besttype ( mostrecentrevision run2projectdirectory ) ) ) 'Int32'
    performtest ( monitorrepository run2projectdirectory False 250 True ( write 'a change occurred' ) ) 'a change occurred'
    )
  return testsok

command tests
  'various tests'
  'if all tests succeeded, true is returned, otherwise false'
  global alltests False
  performtest ( invoketests ) True
  writefile [basedirectory]\..\..\..\Commands.txt ( getcommands )
  if ( return testsok ) (
    write 'Writing results to disk ...'
    writefile [basedirectory]\..\..\..\Commands.md ( gethelp )
    writefile [basedirectory]\..\..\..\core.run2 ( getcode core )
    writefile [basedirectory]\..\..\..\collections.run2 ( getcode collections )
    writefile [basedirectory]\..\..\..\filesystem.run2 ( getcode 'filesystem' )
    writefile [basedirectory]\..\..\..\io.run2 ( getcode 'io' )
    writefile [basedirectory]\..\..\..\math.run2 ( getcode 'math' )
    writefile [basedirectory]\..\..\..\os.run2 ( getcode 'os' )
    writefile [basedirectory]\..\..\..\system.run2 ( getcode 'system' )
    writefile [basedirectory]\..\..\..\tests.run2 ( getcode 'tests' )
    writefile [basedirectory]\..\..\..\builds.run2 ( getcode 'builds' )
    writefile [basedirectory]\..\..\..\ISS.run2 ( getcode 'ISS' )
    )
  return testsok